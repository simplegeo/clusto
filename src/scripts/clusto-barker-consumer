#!/usr/bin/python2.6
from eventlet.queue import LightQueue as Queue
import eventlet
eventlet.monkey_patch()

from clusto.scripthelpers import init_script
from clusto.drivers import BasicServer, EC2Region, EC2Zone, Pool
from clusto.services.config import conf, get_logger
import clusto

import kombu

from traceback import format_exc
from time import sleep, time

QUEUE_HOSTS = conf('barker.hosts')
QUEUE_EXCHANGE = conf('barker.exchange')
QUEUE_NAME = conf('barker.queue')
QUEUE_VHOST = conf('barker.vhost')
QUEUE_USER = conf('barker.user')
QUEUE_PASSWORD = conf('barker.password')

EC2_SUBKEYS = {
    'ami-id': 'ami',
    'kernel-id': 'kernel',
    'instance-type': 'type',
    'local-hostname': 'private-dns',
    'public-hostname': 'public-dns',
}

log = get_logger('clusto.barker', level='DEBUG')

def barker_callback(body):
    if not 'ec2' in body:
        return
    if not 'instance-id' in body['ec2']:
        return
    ec2 = body['ec2']
    log.debug(ec2['instance-id'])

    try:
        clusto.begin_transaction()
        server = clusto.get_or_create(ec2['instance-id'], BasicServer)

        zone = clusto.get(ec2['placement'])
        if not zone:
            zone = EC2Zone(ec2['placement'], placement=ec2['placement'])
        else:
            zone = zone[0]
        if not server in zone:
            zone.insert(server)

        server.del_attrs(key='ec2')

        for key, subkey in EC2_SUBKEYS.items():
            server.set_attr(key='ec2', subkey=subkey, value=ec2[key])

        for group in ec2['security-groups']:
            server.add_attr(key='ec2', subkey='security-group', value=group)
            if group.find('_') != -1:
                environment, role = group.lower().split('_', 1)
                p = clusto.get_or_create(environment, Pool)
                if not server in p:
                    p.insert(server)
                p = clusto.get_or_create(role, Pool)
                if not server in p:
                    p.insert(server)

        server.bind_ip_to_osport(ec2['local-ipv4'], 'nic-eth', 0)
        server.bind_ip_to_osport(ec2['public-ipv4'], 'nic-eth', 0)

        system = body['os']
        server.set_attr(key='system', subkey='memory',
                        value=int(system['memory']['MemTotal']) / 1024)
        server.set_attr(key='system', subkey='hostname',
                        value=system['hostname'])
        server.set_attr(key='system', subkey='os',
                        value=system['operatingsystemrelease'])

        server.del_attrs(key='disk')
        blockmap = [(v.replace('/dev/', ''), k) for k, v in ec2['block-device-mapping'].items() if k != 'root']
        blockmap = dict(blockmap)
        total_disk = 0
        for i, disk in enumerate(system['disks']):
            for subkey in disk.keys():
                server.set_attr(key='disk', subkey=subkey, number=i, value=str(disk[subkey]))
            if disk['osname'] in blockmap:
                server.set_attr(key='disk', subkey='ec2-type', number=i, value=blockmap[disk['osname']])
            total_disk += disk['size']
        total_disk = total_disk / 1073741824
        server.set_attr(key='system', subkey='disk', value=total_disk)

        for subkey, value in body.get('sgmetadata', {}).items():
            server.set_attr(key='sgmetadata', subkey=subkey, value=value)
            if subkey == 'clusterid' and value:
                cluster = clusto.get_or_create(value, Pool)
                if not server in cluster:
                    cluster.insert(server)

        server.set_attr(key='barker', subkey='last_updated', value=int(time()))

        try:
            owners = body['owners']
            for owner, reason in owners.iteritems():
                server.set_attr(key='owner', subkey=owner, value=reason)
        except KeyError:
            pass

        clusto.commit()
    except:
        log.warning('Exception from %s: %s' % (ec2['instance-id'], format_exc()))
        clusto.rollback_transaction()

class BarkerConsumer(object):
    def __init__(self, queue):
        self.queue = queue

    def callback(self, body, message):
        self.queue.put(body)
        message.ack()

    def __call__(self, hostname):
        exchange = kombu.Exchange(QUEUE_EXCHANGE, type='fanout',
                                  delivery_mode='transient')
        queue = kombu.Queue(QUEUE_NAME, exchange)
        connection = kombu.BrokerConnection(
            hostname=hostname,
            userid=QUEUE_USER,
            password=QUEUE_PASSWORD,
            virtual_host=QUEUE_VHOST)
        channel = connection.channel()
        consumer = kombu.Consumer(channel, queue, callbacks=[
            self.callback
        ])
        consumer.consume()

        log.info('%s consumer running' % hostname)
        while True:
            connection.drain_events()

def clusto_updater(queue):
    while True:
        body = queue.get()
        barker_callback(body)

def main():
    init_script()
    queue = Queue()
    barker = BarkerConsumer(queue)
    for hostname in QUEUE_HOSTS:
        eventlet.spawn_n(barker, hostname)
    clusto_updater(queue)

if __name__ == '__main__':
	main()
